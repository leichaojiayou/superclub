var app = getApp()
const utils = app.util;
import storage from '../../../utils/storage.js'
var organizeApi = app.api("organizeApi");
var systemApi = app.api("systemApi")
// 初始化时间日期
const date = new Date()
const years = []
const months = []
const hours = []
const minutes = []
const day28 = []
const day29 = []
const day30 = []
var day31 = []
var nowyear = 0;
var j = 0
for (let i = 1990; i <= 2050; i++) {
  years.push(i)
  if (date.getFullYear() == i) {
    nowyear = j
  }
  j++
}

for (let i = 1; i <= 12; i++) {
  months.push(i)
}

for (let i = 1; i <= 28; i++) {
  day28.push(i)
}

for (let i = 1; i <= 29; i++) {
  day29.push(i)
}
for (let i = 1; i <= 30; i++) {
  day30.push(i)
}
for (let i = 1; i <= 31; i++) {
  day31.push(i)
}
for (let i = 0; i <= 23; i++) {
  hours.push(i)
}
for (let i = 0; i <= 59; i++) {
  minutes.push(i)
}

Page({
  data: {
    point_color: '000000',
    color: [
      'ff3a3a',
      'ffae3a',
      'ffde00',
      '7dcc4d',
      '36aafb',
      'c973ff',
      '000000',
    ],
    contents: [],
    // back: 's',
    applyFields: [
      { isCheck: true, canEidt: false, text: '昵称', option: "", defaultValue: "请填写昵称", fieldName: "昵称", fieldType: 1 },
      { isCheck: true, canEidt: false, text: '手机', option: "", defaultValue: "请填写手机", fieldName: "手机", fieldType: 1 },
      { isCheck: true, canEidt: false, text: '性别', option: "男，女", defaultValue: "男", fieldName: "性别", fieldType: 2 },
      { isCheck: false, canEidt: false, text: '真实姓名', option: "", defaultValue: "", fieldName: "真实姓名", fieldType: 1 },
      { isCheck: false, canEidt: false, text: '身份证', option: "", defaultValue: "", fieldName: "身份证", fieldType: 1 }
    ],
    pos: 0,
    input_auto: false,
    font_size: 1,
    font_color: '000000',
    // font_weight:'normal',
    isWeight: 0,
    istap: false,
    test: 's',
    can: '000',
    isShowColor: true,
    windowWidth: "0px",
    //日期控件
    years: years,
    year: date.getFullYear(),
    months: months,
    days: day31,
    month: date.getMonth() + 1,
    day: date.getDate(),
    hours: hours,
    hour: date.getHours(),
    minutes: minutes,
    minute: '00',
    value: [nowyear, date.getMonth(), date.getDate() - 1, date.getHours(), date.getMinutes()],
    starttime: '开始时间',
    modalShowStyle: '',
    zindex: -1,
    scrolly: true,
    timetxt: "",
    deadlineTxt: "",	//	报名截止时间（毫秒时间戳）
    beginTxt: "",	//	活动开始时间（毫秒时间戳）
    endTxt: "",

    actInfo: {},
    actId: '',
    /********************************************************************************************************************************* */
    title: "",	//	活动主题（标题）
    content: "",	//	活动内容
    max_apply_count: 0,	//	活动最多报名人数, 如果不限制传入-1
    deadline: 0,	//	报名截止时间（毫秒时间戳）
    begin: 0,	//	活动开始时间（毫秒时间戳）
    end: 0,	//	活动截止时间（毫秒时间戳）
    lat: 0,	//	经度
    lng: 0,	//	纬度
    address: "0",	//	活动地址
    apply_check: 0,	//	是否开启报名审核 1:是 0:否 默认: 0
    fields: "0",	//	非必需字段
    cost: 0,	//	如果是免费就传0 收费就传具体的数字 默认: 免费
    cost_desc: "",	//	活动费用描述
    guide: "",	//	报名须知
    auto_create_group: 0,	//	是否自动创建群 1:创建 0:不创建 默认: 0
    cover: "",	//	显示指定封面 未指定时提取活动内容第一张图
    act_type: 1,	//	活动类型（1：俱乐部公开活动 2：俱乐部内部活动 3：私人活动）
    helper_apply: 1,	//	是否开启帮人报名功能 1:是 2:否 默认: 1
    user_lat: 0,	//	发布活动时，用户所在的纬度, 需要增大一百万倍再传过来
    user_lng: 0,	//	发布活动时，用户所在的经度, 需要增大一百万倍再传过来
    user_location: "",	//	发布活动时，用户所在的一级城市
    act_location: "",	//	活动地址（发布活动时，标记的活动位置，即参数address）所在一级城市
    act_type: 1,	//	活动类型（1：俱乐部公开活动 2：俱乐部内部活动 3：私人活动）
    need_to_pay: 1,	//	是否是收费活动（1：不收费 2：收费）默认 1: 不收费
    how_to_pay: 1,	//	付费方式（1：无(包括该版本前的非在线收费活动) 2：在线付费）默认：1:无
    payee_account: 1,	//	收款账户ID（即收款人用户ID，tips：不是会员号）
    cancel_apply: 1,	//	是否可以取消报名，1是可以，0是不可以
    begin_sms_time: 3600,//活动开始前短信提醒时间，默认24小时前，单位：秒， 如活动开始一小时前提醒，begin_sms_time=3600. 不发送短信传-1
    // begin_sms_msg	:	"您报名的活动（xxxxxxx）将于1月26日18时49分开始，打开超级俱乐部APP查看详情，或点击 s.iweju.com 下载	",	//	活动开始前的短信内容
    data_type: 0,//	数据类型，0是发布正式活动(默认)，1是保存为草稿
    tickets_form: [],
    /**********************************************************************************************************************************/
    tickets: [],
    payee: {},
    president: {},
    image: "",
    beginSmsTimes: [],
    cover_img: "",
    haveApplyNum: 0, //已报名人数
    actFeeText: "免费",//费用说明
    smsText: "活动开始前24小时",
    actTypeTxt: "公开活动"

  },
  position: -1,
  input_content: '',
  onLoad: function (e) {
//actID
    var that = this;
    storage.saveSync("key", "31a7f654b77486ce000083e1905b7ef7")
    //storage.saveSync("key", "ebbde9f916b7bc80000083e1905b7eb5")
    setInterval(this.setCan, 500);
    //var actId = e.actId;
    var actId = '591725';
    var actId = '';
    organizeApi.checkActDetail({//活动校验
      data: {
        act_type: 1
      }
    },
      function (res) {
        var payee = res.payee
        var president = res.president
        that.setData({ payee: payee, president: president })
      });
    // var congte = [{"type":"text","text":"n12asdfasdf7777777","color":"0,0,0","weight":false,"font_size":false},{"type":"text","text":"x","color":"0,0,0","weight":false,"font_size":false},{"type":"text","text":"e","color":"0,0,0","weight":false,"font_size":false},{"type":"text","text":"f","color":"0,0,0","weight":false,"font_size":false},{"type":"can"}]
    // this.setData({contents:congte})

    if (actId && actId != '') {//编辑活动
      var param = {}
      var data = {}
      param.method = "GET";
      param.activity_id = actId;
      param.load_model = 0;


      organizeApi.getActDetail({
        data: param
      },
        function (res) {

          var actInfo = res.data.activity;
          console.info(actInfo)
          that.setData({ actInfo: actInfo });
          //初始化标题
          that.initTitle(actInfo);
          //初始化内容
          that.initContent(actInfo);
          //初始化自定义填写项
          that.initApplyItem(actInfo);
          //初始化报名人数 时间 地址
          that.initOther(actInfo);

          //初始化活动费用说明 金额 费用说明
          that.initPrice(actInfo);

          //初始化发送短信
          that.initSmsTime(actInfo);

          //初始化更多设置
          that.initSetMore(actInfo);

        },
        function (errInfo) {
          let errorMsg = utils.getErrorMsg(errInfo);
          wx.showModal({ title: '报名列表加载失败', content: errorMsg.title + '；' + errorMsg.content })
        }, function (res) {
          console.log(res)
        })
    } else {//组织活动
      this.initAct()
    }
  },
  onShow: function (e) {
    var cover_img = app.globalData.modelImgSrc //封面
    var actFeeObject = app.globalData.actFeeObject //活动费用
    var applyFieldsObject = app.globalData.applyFieldsObject //用户报名项
    var actType = app.globalData.actType //活动类型
    var smsTips = app.globalData.smsTimes //短信提醒
    if (cover_img && cover_img != "") {//从封面获取图片
      this.setData({ cover: cover_img });
    }
    //活动费用
    if (actFeeObject && actFeeObject != "") {
      var neetoPay = actFeeObject.neeToPay
      var howtoPay = actFeeObject.howToPay
      var actFeeText = "";
      if (neetoPay == 2) {
        if (howtoPay == 1) {
          actFeeText = "付费"
        } else if (howtoPay == 2 || howtoPay == 3) {
          actFeeText = "在线付费"
        }
      } else {
        actFeeText = "免费"
      }
      this.setData({
        tickets: actFeeObject.tickets,
        tickets_form: actFeeObject.tickets_form,
        need_to_pay: neetoPay,	//	是否是收费活动（1：不收费 2：收费）默认 1: 不收费
        how_to_pay: howtoPay,
        actFeeText: actFeeText,
        cost_desc: actFeeObject.costDesc,
        max_apply_count: actFeeObject.maxApplyCount
      })
    }
    //报名项
    if (applyFieldsObject && applyFieldsObject != "") {
      console.info(applyFieldsObject)
      var index = applyFieldsObject.fieldIndex
      var fields = applyFieldsObject.fields
      var applyFields = this.data.applyFields

      if (index > applyFields.length - 1) {//新增报名项
        var applyField = {}
        applyField.isCheck = true
        applyField.canEidt = true
        applyField.text = fields.field_name
        applyField.option = fields.option
        applyField.defaultValue = ""
        applyField.fieldName = fields.field_name
        applyField.fieldType = fields.fieldType
        applyFields[index] = applyField

      } else {
        applyFields[index].fieldType = fields.fieldType
        applyFields[index].option = fields.option
        applyFields[index].fieldName = fields.field_name
      }


      this.setData({ applyFields: applyFields })
    }
    if (actType && actType != "") {
      console.info()
      var actTypeTxt = "";
      if (actType == 1) {
        actTypeTxt = "公开活动"
      }
      if (actType == 2) {
        actTypeTxt = "俱乐部内活动"
      }
      this.setData({ act_type: actType, actTypeTxt: actTypeTxt });
    }
    //发送短信
    if (smsTips && smsTips != "") {
      var time = smsTips.beginSmsTime;
      var times = smsTips.beginSmsTimes
      var smsText = "";
      if (time == -1) {
        smsText = "不发送";
      } else {
        var hour = time / 3600;
        smsText = '活动开始前' + hour + '小时'
      }
      this.setData({
        smsText: smsText,
        begin_sms_time: time,
        beginSmsTimes: times
      });
    }
  },
  initAct: function () {
    var nowtime = new Date().getTime()
    var nowtimetxt = this.formatTime(new Date());
    console.info(nowtimetxt)


    var beginSmsTimes = [
      {
        "isDefault": 1,
        "text": "24小时前",
        "value": 86400
      },
      {
        "isDefault": 0,
        "text": "12小时前",
        "value": 43200
      },
      {
        "isDefault": 0,
        "text": "6小时前",
        "value": 21600
      },
      {
        "isDefault": 0,
        "text": "3小时前",
        "value": 10800
      },
      {
        "isDefault": 0,
        "text": "1小时前",
        "value": 3600
      },
      {
        "isDefault": 0,
        "text": "不发送",
        "value": -1
      }
    ];
    this.setData({
      begin: nowtime,
      beginTxt: nowtimetxt,
      end: nowtime,
      endTxt: nowtimetxt,
      deadline: nowtime,
      deadlineTxt: nowtimetxt,
      address: "标记活动位置，可不标",
      beginSmsTimes: beginSmsTimes
    })

  },
  initTitle: function (actInfo) {
    this.setData({ title: actInfo.title })
  },
  initContent: function (actInfo) {
    var conts = actInfo.content;
    var contents = []
    var systemInfo = this.getSystemInfo()
    for (var i = 0; i < conts.length; i++) {
      var content = {}
      if (conts[i].type == 1) {//文本类型
        var num = /(\r\n)|(\n)/g;
        var value = "";
        if (num.test(conts[i].value)) {//换行
          value = ""
          this.setData({ windowWidth: systemInfo.windowWidth + "px" })
        } else {
          value = conts[i].value
        }
        console.info(value)
        content.type = conts[i].type
        content.value = value
        content.bold = conts[i].bold
        content.color = conts[i].color
        content.size = conts[i].size

      }
      if (conts[i].type == 2) {//图片类型
        content.type = conts[i].type
        content.value = conts[i].value
      }
      contents[i] = content;

    }
    // this.setData({ contents: contents })
    console.info(JSON.stringify(this.data.contents));
  },
  getSystemInfo: function () {
    var that = this
    var sysInfo = []
    wx.getSystemInfo({
      success: function (res) {
        sysInfo = res
      }
    })
    return sysInfo
  },
  initApplyItem: function (actInfo) {
    var actForms = actInfo.applyFields;
    if (actForms.length > 0) {
      var actForm = new Array();
      for (var i = 0; i < actForms.length; i++) {
        var fieldName = {}
        fieldName = {
          isCheck: true,
          text: actForms[i].fieldName,
          canEidt: (actForms[i].fieldName == "昵称" || actForms[i].fieldName == "性别" || actForms[i].fieldName == "手机") ? false : true,
          option: actForms[i].option,
          defaultValue: actForms[i].defaultValue,
          fieldName: actForms[i].fieldName,
          fieldType: actForms[i].fieldType
        };
        actForm[i] = fieldName;
      }
      this.setData({ applyFields: actForm });
    }
  },
  initOther: function (actInfo) {
    //活动时间
    if (actInfo.begin) {
      var beginTime = this.formatTime(new Date(actInfo.begin));
      this.setData({
        begin: actInfo.begin,
        beginTxt: beginTime
      })

    }
    if (actInfo.end) {
      var endTime = this.formatTime(new Date(actInfo.end));
      this.setData({
        end: actInfo.end,
        endTxt: endTime
      })
    }
    if (actInfo.deadline) {
      this.setData({
        deadline: actInfo.deadline,
        deadlineTxt: this.formatTime(new Date(actInfo.deadline))
      })
    }

    //活动地址
    if (actInfo.address) {
      this.setData({
        address: actInfo.address,
        lat: actInfo.lat,
        lng: actInfo.lng
      })
    } else {
      this.setData({ address: "标记活动位置，可不标" })
    }

  },
  initPrice: function (actInfo) {
    this.setData({ haveApplyNum: actInfo.haveApplyNum })
    var flag = false;
    if (actInfo.needToPay == 2) {
      var actFeeText = "付费"
      if (actInfo.howToPay == 1) {
        actFeeText = "付费"
      } else if (actInfo.howToPay == 2 || actInfo.howToPay == 3) {
        actFeeText = "在线付费"
      }
      this.setData({
        actFeeText: actFeeText,
        need_to_pay: 2,		//	是否是收费活动（1：不收费 2：收费）默认 1: 不收费
        how_to_pay: actInfo.howToPay,
        cost_desc: actInfo.costDesc
      })
      if (actInfo.maxApplyCount == -1) {
        this.setData({ max_apply_count: "-1" })
      } else {
        this.setData({ max_apply_count: actInfo.maxApplyCount })
      }
    } else {
      this.setData({ actFeeText: "免费" })
      if (actInfo.maxApplyCount == -1) {
      } else {
        this.setData({
          max_apply_count: actInfo.maxApplyCount,
          how_to_pay: actInfo.howToPay,
          need_to_pay: 1
        })
      }
    }

    this.setData({
      cost_desc: actInfo.costDesc,
      tickets: actInfo.tickets
    });
  },

  initSmsTime: function (actInfo) {
    var time = actInfo.beginSmsTime;
    var smsText = "";
    if (time == -1) {
      smsText = "不发送";
    } else {
      var hour = time / 3600;
      smsText = '活动开始前' + hour + '小时'
    }
    this.setData({
      smsText: smsText,
      begin_sms_time: time,
      beginSmsTimes: actInfo.beginSmsTimes
    });
  },
  initSetMore: function (actInfo) {
    if (this.data.cover_img != "") {
      this.setData({ cover: this.data.cover_img })
    } else {
      this.setData({ cover: actInfo.cover })
    }

    this.setData(
      {
        apply_check: actInfo.applyCheck,
        helper_apply: actInfo.helperApply
      });

  },
  canApplyCheck: function (e) {
    var check = e.detail.value;
    if (check) {
      //	是否开启报名审核 1:是 0:否 默认: 0
      this.setData({ apply_check: 1 })
    } else {
      his.setData({ apply_check: 0 })
    }
  },
  canHelpApply: function (e) {
    var help = e.detail.value;
    if (help) {
      //	是否开启帮人报名功能 1:是 2:否 默认: 1
      this.setData({ helper_apply: 1 })
    } else {
      his.setData({ helper_apply: 2 })
    }
  },
  addActAddress: function () {
    var that = this;
    wx.showActionSheet({
      itemList: ['标记线下活动地点', '线上活动'],
      success: function (e) {
        var index = e.tapIndex;
        if (index == 0) {
          that.chooseLocation();
        } else if (index == 1) {
          that.setData({ address: "线上活动" });
        }
      }
    })
  },
  chooseLocation: function () {
    var longitude = this.data.lng / 1000000;
    var latitude = this.data.lat / 1000000;
    //  wx.openLocation({
    //   longitude: Number(longitude),
    //   latitude: Number(longitude),
    //   name: "",
    //   address: this.data.address
    // })
    var that = this
    wx.chooseLocation({
      success: function (res) {
        console.log(res)
        that.setData({
          lat: res.latitude * 1000000,
          lng: res.longitude * 1000000,
          address: res.address
        })
      }
    })

  },

  formatTime: function (date) {
    var year = date.getFullYear()
    var month = date.getMonth() + 1
    var day = date.getDate()

    var hour = date.getHours()
    var minute = date.getMinutes()
    var second = date.getSeconds()
    var datemap = [year, month, day].map(this.formatNumber);
    return datemap[0] + '年' + datemap[1] + '月' + datemap[2] + '日' + ' ' + [hour, minute].map(this.formatNumber).join(':')
  },
  formatNumber: function (n) {
    n = n.toString()
    return n[1] ? n : '0' + n
  },
  changeActCover: function () {
    var that = this;
    wx.showActionSheet({
      itemList: ['拍照', '从手机相册选择', '从模板库选择'],
      success: function (e) {
        var index = e.tapIndex;
        if (index == 0) {
          that.cameraimg();
        } else if (index == 1) {
          that.albumimg();
        } else {
          that.modelimg();
        }
      }
    })
  },
  cameraimg: function (e) {
    var that = this
    wx.chooseImage({
      count: 9, // 默认9
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: ['camera'], // 可以指定来源是相册还是相机，默认二者都有
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
        let localPath = res.tempFilePaths[0]
        systemApi.uploadImage(localPath, res => {
          var imgPath = res.data.url;
          that.setData({
            cover: imgPath
          })
        }, res => {
          //上传图片失败
          console.log("图片上传失败");
        })
      }
    })
  },
  albumimg: function (e) {
    var that = this
    wx.chooseImage({
      count: 9, // 默认9
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: ['album'], // 可以指定来源是相册还是相机，默认二者都有
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片

        let localPath = res.tempFilePaths[0]
        systemApi.uploadImage(localPath, res => {
          var imgPath = res.data.url;
          that.setData({
            cover: imgPath
          })
        }, res => {
          //上传图片失败
          console.log("图片上传失败");
        })
      }
    })
  },
  modelimg: function () {
    app.wxService.navigateTo('organize/act_cover/act_cover')
  },
  addApplyFields: function (e) {
    app.wxService.navigateTo('organize/act_applyfields/act_applyfields', { isEidt: false, fieldIndex: this.data.applyFields.length })
  },
  editApplyFields: function (event) {
    var fieldIndex = event.currentTarget.id
    var fieldNames = this.getApplyFieldNames()
    var that = this;
    wx.showActionSheet({
      itemList: ['编辑', '删除'],
      success: function (e) {
        var index = e.tapIndex;
        if (index == 0) {
          app.wxService.navigateTo('organize/act_applyfields/act_applyfields',
            {
              isEidt: true,
              fieldIndex: fieldIndex,
              applyField: JSON.stringify(that.data.applyFields[fieldIndex]),
              fieldNames: JSON.stringify(fieldNames)
            })
        } else if (index == 1) {
          var applyFields = that.data.applyFields
          applyFields.splice(fieldIndex, 1)
          that.setData({ applyFields: applyFields })
        }
      }
    })
  },
  getApplyFieldNames: function () {
    var fieldNames = new Array();
    for (var i = 0; i < this.data.applyFields.length; i++) {
      fieldNames.push(this.data.applyFields[i].fieldName)
    }
    console.info(fieldNames)
    return fieldNames;
  },

  setActFee: function () {
    app.wxService.navigateTo('organize/act_fee/act_fee', {
      actId: '11',
      tickets: JSON.stringify(this.data.tickets),
      neeToPay: this.data.need_to_pay,
      howToPay: this.data.how_to_pay,
      maxApplyCount: this.data.max_apply_count,
      costDesc: this.data.cost_desc,
      payee: this.data.payee,
      president: this.data.president
    })
  },
  setActType: function () {
    app.wxService.navigateTo('organize/act_type/act_type', { actType: this.data.act_type })
  },
  setActSMSTips: function () {
    app.wxService.navigateTo('organize/act_smstips/act_smstips', {
      beginSmsTimes: JSON.stringify(this.data.beginSmsTimes),
      beginSmsTime: this.data.begin_sms_time
    }, res => {
      console.info(res)
    })
  },
  choseApplyFields: function (e) {
    console.log(e.target.id)
    var applyFields = this.data.applyFields
    var fieldName = applyFields[e.target.id].fieldName

    if (fieldName != "昵称" && fieldName != "手机" && fieldName != "性别") {
      applyFields[e.target.id].isCheck = !applyFields[e.target.id].isCheck
      this.setData({
        applyFields: applyFields
      })
    }


  },
  uploadImg: function (e) {
    var that = this;
    wx.chooseImage({
      count: 1, // 默认9
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片

        let localPath = res.tempFilePaths[0]
        systemApi.uploadImage(localPath, res => {
          var imgPath = res.data.url;
          console.log(res);
        }, res => {
          //上传图片失败
          console.log("图片上传失败");
        })
      }
    });
  },

  saveOrUpdateAct: function () {

    //检验不通过不能进行发布操作
    if (!_actop._validatePostInfo()) {
      return;
    }

    var params = {};
    params.actID = _actop._id | '';
    params.dataType = type;//发部类型 草稿或者正常活动
    postType = type;
    params.title = $('#post_party_title').val();//_localStorage._get('actDetailTitle');//$('#title').val();
    //param.type = 3;//富文本类型

    //		param.actContent = editor.html();
    params.content = UE.getEditor('editor_iframe_holder').getContent4Json();
    //param.storageContent = editor.html();
    if (_userAgent._inPc()) {
      params.createPlatform = 1;
    } else {
      params.createPlatform = 2;
    }

    var appllyNumTem = $('#waiapllyNum').val();
    if (appllyNumTem == '不限' || appllyNumTem == '') {
      appllyNumTem = '-1人';
    }
    params.maxApplyCount = appllyNumTem.substring(0, appllyNumTem.length - 1);

    params.beginTime = $('#post_begintime').val();
    params.endTime = $('#post_endtime').val();
    if ($('#post_deadlinetime').val() != "" && $('#post_deadlinetime').val() != "选择时间") {
      params.deadlineTime = $('#post_deadlinetime').val();
    }

    if ($('#actAddress').attr('jwd')) {
      params.address = $('#actAddress').text();
      var jwd = $('#actAddress').attr('jwd').split(',');
      params.lng = jwd[0];//经度
      params.lat = jwd[1];//纬度
    } else {
      params.address = "";
      params.lng = 0;//经度
      params.lat = 0;//纬度
    }

    params.fields = JSON.stringify(_actop._getSignOptions(2));

    params.helperApply = _actop._isHelp_apply;//是否开启帮报名

    //付费
    params.needToPay = _actop._needPay;
    params.howToPay = _actop._howToPay;
    params.tickets = _actop._feeItems;

    //退款暂时不开放
    if (_actop._needPay == 2) {//付款可退款
      params.canRefund = _actop._canRefund;
      if (_actop._refundTime == "") {
        params.refundTime = $("#post_begintime").val();//默认活动开始时间
      } else {
        params.refundTime = _actop._refundTime;
      }
    } else {
      params.canRefund = 3;//免费活动默认是3
    }
    //params.canRefund = 3;//免费活动默认是3
    //分组
    params.isGroup = _actop._isGroup;

    var maxApplyCount = params.maxApplyCount;//最后的总人数

    var rnums = 0;//计算票价总人数  票价名额
    if (_actop._needPay == 2) {
      var feeItems = _actop._getAppSets();
      for (var i = 0; i < feeItems.length; i++) {
        var mcount = feeItems[i].memberCount;
        if (mcount == '-1') {
          rnums = -1;
          break;
        } else {
          rnums = Number(rnums) + Number(mcount);
        }
      }
    }

    //优先级费用名额>队伍人数>总名额
    if (_actop._isGroup == 1) {
      var groupNum = $('#groupNum').val();;
      var groupMinMemberCount = $('#groupminNum').val();
      var groupMaxMemberCount = $('#groupmaxNum').val();

      if (groupNum == '' || groupNum == '默认不限') {
        groupNum = '-1';
      }
      if (groupMinMemberCount == '' || groupMinMemberCount == '默认不限') {
        groupMinMemberCount = '-1';
      }
      if (groupMaxMemberCount == '' || groupMaxMemberCount == '默认不限') {
        groupMaxMemberCount = '-1';
      }

      params.groupNum = groupNum;
      params.groupMinMemberCount = groupMinMemberCount;
      params.groupMaxMemberCount = groupMaxMemberCount;
			/*var num = Number(params.groupMaxMemberCount) * Number(params.groupNum);
			var applyNum = Number(params.maxApplyCount);//ligs转换成数字0004228
			if(applyNum!=-1&&num>applyNum){ 
				_toast._show('队伍人数已超过活动名额！');
				//_toast._show('已超过报名人数上限！');
				return;
			}
			
			if(_actop._needPay == 2){
				if (rnums != -1 && num > rnums) {
					_toast._show('队伍人数已超过费用名额！');
					return;
				}
			}
			//总名额只能大于或等于队伍总人数，总名额大于队伍总人数，那么报名人数以队伍总人数为准
			maxApplyCount = num;*/
    }
    //总名额只能大于或等于费用总人数，总名额大于费用总人数，那么报名人数以费用总人数为准
    if (_actop._needPay == 2) {

      var applyNum = Number(params.maxApplyCount);// ligs转换成数字0004228  活动名额
      if (applyNum != -1 && rnums > applyNum) {
        _toast._show('费用名额已超过活动名额！');
        return;
      }

      if (rnums != '-1') {
        // 总名额只能大于或等于费用总人数，总名额大于费用总人数，那么报名人数以费用总人数为准
        maxApplyCount = rnums;
      } else {
        maxApplyCount = params.maxApplyCount;
      }

    }
    if (maxApplyCount == "不限" || maxApplyCount === "不限人" || maxApplyCount === "不限人数") {
      maxApplyCount = -1;
    }
    params.maxApplyCount = maxApplyCount;

    if ($('#price').text() != '免费') {
      params.cost = $('#costText').val();
      if (params.cost != "" && params.cost != "0" && params.cost > 0) {
        params.costDesc = $('#costDescText').val();
      } else {
        params.cost = 0;
      }
    } else {
      params.cost = 0;
    }
    params.costDesc = $('#costDescText').val();

    if ($('.enrollNotice').val() == "填写报名须知" || $('.enrollNotice').text() == "填写报名须知") {
      params.guide = "";//报名须知
    } else {
      params.guide = $('.enrollNotice').val();//报名须知
      params.guide = params.guide.replace("\r\n", "\n");
    }
    params.autoCreateGroup = _actop._idAuto;//是否自动建群
    params.applyCheck = _actop._ischeck;//是否审核报名
    //params.cancelApply = _actop._isQxApply;//是否可以取消报名
    params.beginSmsTime = _actop._smsTime;//发送短信时间
    //params.beginSmsMsg = $('#smsMsg').text();//发送短信内容
    params.actType = _actop._actType;//活动类型
    if ($('.actCover').val() != undefined) {//[0].src.charAt($('.actCover')[0].src.length - 1
      params.cover = $('.actCover')[0].src;
    } else {
      _toast._show('请上传活动封面！');
      return;
    }

    if (_actop._ispost) {
      return;
    }
    //发布开关
    _actop._ispost = true;

    if (!_user._isLogin()) {
      _localStorage._set("login_type", "act_op");
      _localStorage._set('postActopParam', JSON.stringify(params));
      _user._toLogin();
      return;
    } else if (_actop._id == "0" || _actop._id == "" || _actop._id == 0) {
      _loading._show("请稍候...");
      _$(_actop._link._postActInfoUrl, params, _actop._postAddSuccess);
    } else {
      _loading._show("请稍候...");
      _$(_actop._link._postActInfoUrl, params, _actop._postUpdateSuccess);
    }

  },
  validatePostInfo: function () {
    var okay = true;
    //校验活动主题方面
    var oTitle = this.data.title;
    if (oTitle && oTitle.val() != '') {
      if (oTitle.length > 30) {
        wx.showToast({
          title: "活动主题最多30个字"
        })
        okay = false;
      }
    } else {
      wx.showToast({
        title: "请输入活动主题"
      })
      _toast._show("请输入活动主题");
      okay = false;
    }

    var set = this.data.actFeeText;
    if (set == '未设置') {
      wx.showToast({
        title: "请先设置活动费用类型"
      })    
      okay = false;   
    }

    var needToPay = this.data.need_to_pay;
    if (needToPay == 2) {
      var feeItms = _actop.getAppSets();
      if (feeItms.length == 0) {
        _toast._show("请先设置活动费用类型");
        okay = false;
        return okay;
      }
    }

    //校验活动详情方面
    var content = myeditor.getContent();
    /* var contxt = myeditor.getContentLength(true);*/
    if (content && content != "") {
      var _img = content.match(/<img[^>]*class\=["']?post_pic["']?[^>]*>|<embed[^>]*\/?>/gi);
      if (_img != null && _img.length > 50 && (_actop._id != 41510 && _actop._id != 42785 && _actop._id != 61440 && _actop._id != 132860)) {//暂时单一活动开放无限制上传图片
        _toast._show("图片太多了，最多只能上传30张图片");
        okay = false;
        return okay;
      }
      /* if(contxt>10000){
        _toast._show("内容超过10000字，请控制一下篇幅。");
        return false;
      }*/
      /*if(content.length>500000){
       _toast._show("活动详情最多500000字符");
       okay = false;
       return okay;
      }*/
    } else {
      _toast._show('请输入活动详情');
      okay = false;
      return okay;
    }

    //分组
    if (_actop._isGroup == 1) {
      var groupNum = $('#groupNum').val();
      var groupMinNum = $('#groupminNum').val();
      var groupMaxNum = $('#groupmaxNum').val();

			/*开放，不做限制
			  if(!groupNum||groupNum<=0){
				_toast._show('请输入队伍数量,并大于0');
				okay = false;
				return okay;
			}else if(!groupMinNum||groupMinNum<=0){
				_toast._show('请输入队伍人数下限,并大于0');
				okay = false;
				return okay;
			}else if(!groupMaxNum||groupMaxNum<=0){
				_toast._show('请输入队伍人数上限,并大于0');
				okay = false;
				return okay;
			}else if(Number(groupMinNum)>Number(groupMaxNum)){
				_toast._show('请输入队伍人数上限不能小于人数下限');
				okay = false;
				return okay;
			}*/
    }

    //校验活动开始时间
    if ($('#post_begintime').val()) {
      if ($('#post_endtime').val()) {
        if ($('#post_begintime').val() >= $('#post_endtime').val()) {
          _toast._show('开始时间要早于结束时间');
          okay = false;
          return okay;
        }
      } else {
        _toast._show('结束时间不能为空');
        okay = false;
        return okay;
      }
    } else {
      _toast._show('开始时间不能为空');
      okay = false;
      return okay;
    }

    //报名截止时间
    if ($('#post_deadlinetime').val() && $('#post_deadlinetime').val() != "选择时间") {
      if ($('#post_endtime').val()) {
        /*if($('#post_deadlinetime').val() > $('#post_begintime').val()) {*/
        if ($('#post_deadlinetime').val() > $('#post_endtime').val()) {
          _toast._show('截止时间不能晚于结束时间');
          okay = false;
          return okay;
        }
      } else {
        _toast._show('开始时间不能为空');
        okay = false;
        return okay;
      }
    }/*else {
			_toast._show('截止时间不能为空');
			okay = false;
			return okay;
		}*/
    if ($('#costDescText').val() != "" || $('#costDescText').val() != null) {
      if ($('#costDescText').val().length > 1000) {
        _toast._show('费用说明字数长度不能大于1000');
        okay = false;
        return okay;
      }
    }

    if ($('.actCover').val() == undefined) {//[0].src.charAt($('.actCover')[0].src.length - 1
      _toast._show('请上传活动封面！');
      okay = false;
      return okay;
    }
    if (_actop._howToPay == 2) {
      if (_actop._needPay == 1 || $('#costText').val() <= 0) {
        _toast._show('在线收费活动必须设置活动费用！');
        return;
      }
    }
    return okay;
  },
  getAppSets: function () {
    var ticketChecked = true;
    var tickets = this.data.tickets;
    if (tickets.length == 0) {
      this.setData({
        neeToPay: 1,
        howToPay: 1
      })
    } else {
      for (var i = 0; i < tickets.length; i++) {
        if (!tickets[i].name || tickets[i].name == "") {
          ticketChecked = false;
          wx.showToast({
            title: "费用名称不能为空"
          })
          break;
        } else {
          for (var j = i + 1; j < tickets.length; j++) {
            if (tickets[j].name && tickets[j].name != "") {
              if (tickets[i].name == tickets[j].name) {
                ticketChecked = false;
                wx.showToast({
                  title: "费用名称不能重复"
                })
                break;
              }
            }
            if (!ticketChecked) {
              break;
            }
          }
        }
        if (tickets[i].name && tickets[i].name.length > 20) {
          ticketChecked = false;
          wx.showToast({
            title: "费用名称必须在20字内"
          })
          break;
        }
        if (tickets[i].cost && tickets[i].cost < 0) {
          ticketChecked = false;
          wx.showToast({
            title: "费用金额必须大于或者等于0"
          })
          break;
        }
      }

      if (!this.data.costDesc || this.data.costDesc == "") {
        ticketChecked = false;
        wx.showToast({
          title: "费用说明不能为空"
        })
      }
    }

    return ticketChecked;
  },
  //**********************************富文本框******************************************************* */
  choose_img: function (e) {
    var that = this
    wx.chooseImage({
      count: 9, // 默认9
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
        var tempFilePaths = res.tempFilePaths
        console.log(tempFilePaths)
        var n_con = that.data.contents
        if (that.data.istap == true) {
          for (var i in tempFilePaths) {
            var a = { type: 2, value: tempFilePaths[i] + '', width: 100, height: 200 }
            n_con.splice(that.data.pos, 0, a)
          }
        } else {
          for (var i in tempFilePaths) {
            var a = { type: 2, value: tempFilePaths[i] + '', width: 100, height: 200 }
            n_con.push(a)
          }
        }

        that.setData({
          contents: n_con
        })
      }
    })
  }
  ,
  con_tap: function (e) {

    var that = this
    var pos = e.target.id
    var n_con = this.data.contents
    for (var i in n_con) {
      if (n_con[i].type == 'can') {
        n_con.splice(i, 1)
        if (i <= e.target.id) {
          pos--
        }
      }
    }
    n_con.splice(pos, 0, { type: 'can' })
    this.setData({
      contents: n_con,
      pos: pos,
      input_auto: true,
      position: -1,
      istap: true
    })
    setTimeout(function () {
      that.setData({
        input_auto: true
      })
    }, 50)
    // console.log(n_con)
  },
  con_input: function (e) {
    var that = this
    var weizhi
    if (this.data.istap == true) {
      weizhi = check() + 1
    } else {
      weizhi = this.data.contents.length
    }
    var n_con = this.data.contents
    if (this.position == -1) {
      this.position = check() + 1
    }
    if (e.detail.value == '') {
      if (n_con.length > 1) {
        n_con.splice(weizhi - 1, 1)
      }
      that.setData({
        contents: n_con,
        back: 's',
      })
    } else {
      for (var i = 0; i < e.detail.value.length - 1; i++) {
        // e.detail.value.substr(1 + i, 1)
        if (e.detail.value.substr(1 + i, 1) == ' ') {
          n_con.splice(weizhi, 0, { type: 1, value: "" })
        } else if (e.detail.value.substr(1 + i, 1) == '\n' || e.detail.value.substr(1 + i, 1) == '\r\n') {
          n_con.splice(weizhi, 0, { type: 3, value: '\\n' })
        } else {
          n_con.splice(weizhi, 0, { type: 1, value: e.detail.value.substr(1 + i, 1), color: that.data.font_color, bold: that.data.isWeight, size: that.data.font_size })

        }

        that.position++
      }
      that.setData({
        contents: n_con
      })
    }
    that.setData({
      test: 's'
    })

    function del(callback) {
      if (n_con.length > 1) {
        n_con.splice(weizhi, 1)
      }
      that.setData({
        contents: n_con,
        back: 's',
      })
      callback()
    }

    function check() {
      for (var i in that.data.contents) {
        if (that.data.contents[i].type == 'can') {
          return i - 1
        }
      }
    }
  }
  ,
  set_input: function (e) {
    console.info(this.data.font_size)
    var that = this
    var n_con = this.data.contents
    for (var i in n_con) {
      if (n_con[i].type == 'can') {
        n_con.splice(i, 1)
      }
    }
    this.setData({
      contents: n_con,
    })
    this.position = n_con.length
    setTimeout(function () {
      n_con.push({ type: 'can' })
      that.setData({
        contents: n_con,
        pos: n_con.length,
        input_auto: true,
        position: -1,
        istap: true
      })
    }, 100)
  },
  reset_pos: function (e) {
    this.position = -1
    // this.hi()
  },
  choose_weight: function (e) {
    var num
    if (this.data.isWeight == 1) {
      num = 0
    } else {
      num = 1
    }
    this.setData({
      isWeight: num
    })
  },
  test: function (e) {
    this.setData({
      test: 'sss'
    })
  },
  setCan: function (e) {
    if (this.data.can == 'fff') {
      this.setData({
        can: '000'
      })
    } else {
      this.setData({
        can: 'fff'
      })
    }

  }, choose_color: function (e) {
    // 颜色选择
    this.setData({
      point_color: this.data.color[e.target.id],
      font_color: this.data.color[e.target.id]
    })

    if (this.data.isChange) {
      var n_con = this.data.contents
      n_con[this.data.pos].color = this.data.color[e.target.id]
      this.setData({
        contents: n_con,
      })
    }

  }, // 显示与隐藏 颜色选择
  show_color: function (e) {

    var that = this
    var n_con = this.data.contents
    for (var i in n_con) {
      if (n_con[i].type == 'can') {
        n_con.splice(i, 1)
      }
    }
    this.setData({
      contents: n_con,
      isShowColor: !this.data.isShowColor
    })
  }
  ,// 图片删除
  delete: function (e) {
    var that = this
    var n_con = this.data.contents

    n_con.splice(e.target.id, 1)
    that.setData({
      contents: n_con
    })


  },
  user_choose: function (e) {
    var user_choose_list = this.data.user_choose_list
    user_choose_list[e.target.id].isCheck = !user_choose_list[e.target.id].isCheck
    this.setData({
      user_choose_list: user_choose_list
    })

  },
  hi: function (e) {

    var that = this
    var n_con = this.data.contents
    for (var i in n_con) {
      if (n_con[i].type == 'can') {
        n_con.splice(i, 1)
      }
    }
    this.setData({
      contents: n_con
    })
  },
  preview: function () {
    console.log(this.data.contents)
  },
  // 改变A+图片
  changeimg: function () {
    let statu1 = this.data.font_size;
    if (statu1 == 1) {
      statu1 = 2;
    } else {
      statu1 = 1;
    }
    this.setData({
      font_size: statu1,
    })
  },
  //**********************************富文本框******************************************************* */

  //***********************************时间控件************************************************************************
  bindChange: function (e) {
    console.info(e)
    const val = e.detail.value
    console.info(val)
    var y = this.data.years[val[0]];
    var m = this.data.months[val[1]];
    var ds = [];
    if (m == 2) {//2月分
      if ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) {
        ds = day29
      } else {
        ds = day28

      }
    } else {//31天
      if (m == 1 || 3 || 5 || 7 || 8 || 10 || 12) {
        ds = day30

      } else {//30天
        ds = day31

      }
    }
    console.info(this.data.years[val[0]])
    this.setData({
      days: ds,
      year: this.data.years[val[0]],
      month: this.data.months[val[1]],
      day: this.data.days[val[2]],
      hour: this.data.hours[val[3]],
      minute: this.data.minutes[val[4]],
    })
    // 小于10的数值补上0
    if (this.data.months[val[1]] < 10) {
      this.setData({
        month: '0' + this.data.months[val[1]],
      })
    }
    if (this.data.days[val[2]] < 10) {
      this.setData({
        day: '0' + this.data.days[val[2]],
      })
    }
    if (this.data.hours[val[3]] < 10) {
      this.setData({
        hour: '0' + this.data.hours[val[3]],
      })
    }
    if (this.data.minutes[val[4]] < 10) {
      this.setData({
        minute: '0' + this.data.minutes[val[4]],
      })
    }
  },
  hideModal() {
    this.setData({ modalShowStyle: "" });

  },
  togglePicker: function (event) {
    var flag = event.currentTarget.id
    var indexs = []
    if (flag == 'begin') {
      indexs = this.formatTimeIndex(this.data.begin)
    } else if (flag == 'end') {
      indexs = this.formatTimeIndex(this.data.end)
    } else if (flag == 'deadline') {
      indexs = this.formatTimeIndex(this.data.deadline)
    }

    var year = this.data.years[indexs[0]] < 10 ? "0" + this.data.years[indexs[0]] : this.data.years[indexs[0]];
    var month = this.data.months[indexs[1]] < 10 ? "0" + this.data.months[indexs[1]] : this.data.months[indexs[1]];
    var day = day31[indexs[2]] < 10 ? "0" + day31[indexs[2]] : day31[indexs[2]];
    var hour = this.data.hours[indexs[3]] < 10 ? "0" + this.data.hours[indexs[3]] : this.data.hours[indexs[3]];
    var minute = this.data.minutes[indexs[4]] < 10 ? "0" + this.data.minutes[indexs[4]] : this.data.minutes[indexs[4]];

    this.setData({
      modalShowStyle: 'opacity:1',
      zindex: 102,
      scrolly: false,
      timetxt: event.currentTarget.id,
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      value: indexs
    })
  },
  touchCancel: function (event) {
    this.setData({ zindex: -1, scrolly: true })
    this.hideModal();
  },
  touchAdd: function (event) {
    var timet = this.data.year + '年' + this.data.month + '月' + this.data.day + '日 ' + this.data.hour + ':' + this.data.minute
    var time = this.data.year + '-' + this.data.month + '-' + this.data.day + ' ' + this.data.hour + ':' + this.data.minute + ':00'
    var data = new Date(time).getTime()
    var timetxt = this.data.timetxt

    if (timetxt == 'begin') {
      this.setData({
        begin: data,
        beginTxt: timet
      })
    } else if (timetxt == 'end') {
      this.setData({
        end: data,
        endTxt: timet
      })
    } else if (timetxt == 'deadline') {
      this.setData({
        deadline: data,
        deadlineTxt: timet
      })
    }
    this.hideModal();
    this.setData({
      zindex: -1,
      scrolly: true
    })
  },
  formatTimeIndex: function (datetime) {
    var index = []
    let date = new Date(datetime)
    var year = date.getFullYear()
    var month = date.getMonth()
    var day = date.getDate()
    var hour = date.getHours()
    var minute = date.getMinutes()
    var yearindex = 0
    for (var i = 0; i < years.length; i++) {
      if (years[i] == year) {
        yearindex = i;
      }
    }
    index = [yearindex, month, day - 1, hour, minute];
    return index;
  }
  //***********************************时间控件************************************************************************
})
