const storage = require('./storage')
class Session {
    constructor(key, user, recentClubIds, joinClubs) {
        Object.assign(this, {
            key,
            user,
            recentClubIds,
            joinClubs
        })
    }

    getUserKey() {
        if (this.key) {
            return this.key;
        }
        this.key = storage.getSync("key", "")
        return this.key;
    }

    /**
     * userID
     * num, 
     * nick, 
     * avatar,
     * gender,
     * status
     */
    getUserInfo() {
        if (this.user) {
            return this.user
        }
        this.user = storage.getSync("user", {})
        return this.user
    }

    saveUserInfo(user, key) {
        if (user && key) {
            this.key = key;
            this.user = user;
            storage.saveSync("user", user)
            storage.saveSync("key", key)
        }
    }
    /**
     * 是否小程序临时用户
     */
    isTempUser() {
        let userInfo = this.getUserInfo()
        if (userInfo.status) {
            return userInfo.status == 6
        }
        return true
    }

    getMyClubInfo() {
        return storage.getSync("club", {})
    }

    saveMyClubInfo(club) {
        storage.saveSync("club", club)
    }

    removeMyClubInfo() {
        storage.removeSync("club")
    }

    updateJoinClubs(clubs) {
        if(clubs == null || clubs.length == 0) return
        let newClubs = []
        clubs.forEach(e => {
            newClubs.push(e.clubID)
        })
        this.joinClubs = newClubs
    }

    /**
     * 最近访问的俱乐部列表
     */
    recentClubs() {
        if (!this.recentClubIds) {
            this.recentClubIds = storage.getSync("recentClubIds", [])
        }
        if(this.recentClubIds == null) {
            this.recentClubIds = []
        }
        return this.recentClubIds;
    }

    addAccessClub(clubId) {
        if(this.joinClubs && this.joinClubs.length > 0) {
             for (let i = 0; i < this.joinClubs.length; i++) {
                let id = this.joinClubs[i];
                if (id == clubId) {
                    //访问的是我加入的俱乐部，直接返回
                    return
                }
            }
        }
        let clubs = this.recentClubs()
        if (clubs.length > 0) {
            for (let i = 0; i < clubs.length; i++) {
                let id = clubs[i];
                if (id == clubId) {
                    //最近访问过该俱乐部，移除
                    clubs.splice(i, 1)
                }
            }
        }
        clubs.unshift(clubId)
        if (clubs.length >= 11) {
            //保留最近10个访问过的俱乐部
            clubs.pop()
        }
        this.recentClubIds = clubs;
        storage.saveSync("recentClubIds", clubs)
    }

    setCode(code, status) {
        storage.saveSync("code", code);
        storage.saveSync("status", status);
    }

}
module.exports = Session